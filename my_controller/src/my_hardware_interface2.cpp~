#include <hardware_interface/joint_command_interface.h>
#include <hardware_interface/joint_state_interface.h>
#include <hardware_interface/robot_hw.h>
#include <controller_interface/controller.h>
#include <hardware_interface/joint_command_interface.h>
#include <pluginlib/class_list_macros.h>
#include <controller_manager/controller_manager.h>
class MyRobot : public hardware_interface::RobotHW
{
public:
  MyRobot() 
 { 
   // connect and register the joint state interface
   hardware_interface::JointStateHandle state_handle_a_1("joint_arm_a_1", &pos[0], &vel[0], &eff[0]);
   jnt_state_interface.registerHandle(state_handle_a_1);


   registerInterface(&jnt_state_interface);

   // connect and register the joint position interface
   hardware_interface::JointHandle pos_handle_a_1(jnt_state_interface.getHandle("joint_arm_a_1"), &cmd[0]);
   jnt_pos_interface.registerHandle(pos_handle_a_1);


   registerInterface(&jnt_pos_interface);
  }
 void update()
 {
  for(int i=0;i<8;i++)
	pos[i]=cmd[i];
 }
 void printf()
 {
std::cout<<pos[0]<<std::endl;
 }
private:
  hardware_interface::JointStateInterface jnt_state_interface;
  hardware_interface::PositionJointInterface jnt_pos_interface;
  double cmd[8];
  double pos[8];
  double vel[8];
  double eff[8];
};
controller_manager::ControllerManager * cm_ptr;
void control_loop(const ros::TimerEvent& event)
{
//cm_ptr->update(ros::Time::now(), ros::Duration(0.03));
}

int main(int argc,char ** argv)
{
	ros::init(argc, argv, "my_cm");
	ros::NodeHandle n;
  MyRobot robot;
  controller_manager::ControllerManager cm(&robot);
  cm_ptr=&cm;
  ros::AsyncSpinner spinner(1);
  spinner.start();
  float publish_frequency=30.0;
  ros::Timer timer1 = n.createTimer(ros::Duration(1.0/publish_frequency), control_loop);
  ros::Time pre_time=ros::Time::now();
  ros::Rate rate(10.0);
  while (n.ok())
  {
     const ros::Time now =ros::Time::now();
     const ros::Duration period =now-pre_time;
     robot.update();
    // robot.read();
    //cm.update(robot.get_time(), robot.get_period());
     cm_ptr->update(now, period);
     //robot.write();
     //ros::spinOnce();
    rate.sleep();
    pre_time=now;
  }
}
